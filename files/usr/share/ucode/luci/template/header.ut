{#
 Copyright 2022 Jo-Philipp Wich <jo@mein.io>
 Licensed to the public under the Apache License 2.0.
-#}
{%
	include(`themes/${theme}/header`);
-%}
<script src="{{ resource }}/luci.js?v=25.017.24510~d42ec55"></script>
<script src="{{ resource }}/sweetalert2.all.min.js"></script>
<script>
	L = new LuCI({{ replace(`${ {
		media          : media,
		resource       : resource,
		scriptname     : http.getenv("SCRIPT_NAME"),
		pathinfo       : http.getenv("PATH_INFO"),
		documentroot   : http.getenv("DOCUMENT_ROOT"),
		requestpath    : ctx.request_path,
		dispatchpath   : ctx.path,
		pollinterval   : +config.main.pollinterval || 5,
		ubuspath       : config.main.ubuspath || '/ubus/',
		sessionid      : ctx.authsession,
		token          : ctx.authtoken,
		nodespec       : dispatched,
		apply_rollback : max(+config.apply.rollback ||  90, 90),
		apply_holdoff  : max(+config.apply.holdoff  ||   4,  1),
		apply_timeout  : max(+config.apply.timeout  ||   5,  1),
		apply_display  : max(+config.apply.display  || 1.5,  1),
		rollback_token : rollback_token
	} }`, '/', '\\/') }});
</script>
<style>
    .update-info {
        text-align: left;
        margin: 15px 0;
        font-family: Arial, sans-serif;
    }
    .update-info p {
        margin: 8px 0;
        color: #333;
    }
    
    .changelog {
        font-family: Arial, sans-serif;
        font-size: 14px;
        color: #333;
        line-height: 1.6;
        margin-top: 20px;
        padding: 10px;
        border-left: 4px solid #007BFF;
        max-height: 250px;
        overflow-y: auto;
        border-radius: 5px;
    }
    .changelog pre {
        font-family: 'Courier New', monospace;
        white-space: pre-wrap;
        word-wrap: break-word;
        font-size: 14px;
        line-height: 1.5;
    }
    .swal2-popup {
        font-family: Arial, sans-serif;
        max-width: 600px;
    }
    .swal2-title {
        font-size: 1.6em;
        margin-bottom: 15px;
        color: #007BFF;
        background-color: #FFFFFF;
        background: #FFFFFF;
    }
    
    .swal2-html-container {
        background-color: #FFFFFF;
        background: #FFFFFF;
    }
    .swal2-html-container a {
        text-decoration: none;
        color: #007BFF;
    }
    .swal2-html-container a:hover {
        text-decoration: underline;
    }
    .square-wrapper {
        position: fixed;
        right: 20px;
        top: 50%;
        transform: translateY(-50%);
        z-index: 1000;
    }
    .square {
        border: 1px solid #5e42a6;
        height: 26px;
        width: 26px;
        display: block;
        transform: rotate(45deg);
        overflow: hidden;
        cursor: pointer;
        transition: all 500ms cubic-bezier(0.97, 0, 0.395, 0.995);
    }
    .square .burgerwrap {
        height: 18px;
        width: 21px;
        transform: rotate(-45deg);
        padding-left: 2px;
        padding-top: 8px;
        transition: all 500ms cubic-bezier(0.97, 0, 0.395, 0.995);
    }
    .square:hover {
        transform: rotate(135deg);
        border: 1px solid rgb(61, 14, 230);
    }
    .square:hover .burgerwrap {
        transform: rotate(-135deg);
    }
    .square span {
        height: 2px;
        width: 14px;
        background: linear-gradient(145deg, #5e42a6, #b46be4);
        display: block;
        margin-bottom: 2px;
        transition: all 500ms cubic-bezier(0.97, 0, 0.395, 0.995);
    }
    .square span:after {
        content: "";
        height: 2px;
        width: 14px;
        position: absolute;
        background: rgb(61, 14, 230);
        left: -22px;
        margin-top: -4px;
        transition: all 500ms cubic-bezier(0.97, 0, 0.395, 0.995);
    }
    .square:hover span {
        margin-left: 26px;
    }
    .square:hover span:after {
        left: 0.2px;
    }
    .square span:nth-of-type(1),
    .square span:nth-of-type(1):after {
        transition-delay: 0.1s;
    }
    .square span:nth-of-type(2),
    .square span:nth-of-type(2):after {
        transition-delay: 0.2s;
    }
    .square span:nth-of-type(3),
    .square span:nth-of-type(3):after {
        transition-delay: 0.3s;
    }
</style>
<script>
// ====== Constants ======
const baseopenwrt = "null";
const currentBranch = "null";
const currentVersion = "null";
const INFO_URL = 'https://raw.githubusercontent.com/rizkikotet-dev/RTA-WRT/refs/heads/info/informasi.txt';
const CHECK_INTERVAL = 5 * 60 * 1000; // 5 minutes
const TODAY = new Date().toDateString();
let checkTimer;
const cache = {
    content: localStorage.getItem('lastInformation') || '',
    lastUpdate: localStorage.getItem('lastUpdate') || ''
};
// ====== Alert Queue System ======
let alertQueue = [];
let isAlertShowing = false;
function enqueueAlert(alertConfig) {
    alertQueue.push(alertConfig);
    processQueue();
}
async function processQueue() {
    if (isAlertShowing || alertQueue.length === 0) return;
    isAlertShowing = true;
    const alertConfig = alertQueue.shift();
    const result = await Swal.fire(alertConfig);
    if (result.isConfirmed && alertConfig.onConfirm) alertConfig.onConfirm(result);
    if (result.isDenied && alertConfig.onDenied) alertConfig.onDenied(result);
    isAlertShowing = false;
    processQueue();
}
// ====== Utility Functions ======
async function fetchText(url) {
    try {
        const response = await fetch(url);
        if (!response.ok) throw new Error(`Failed to fetch: ${url} (Status: ${response.status})`);
        return await response.text();
    } catch (error) {
        console.error(`Error fetching ${url}:`, error);
        return null;
    }
}
function saveToLocal(key, value) {
    try {
        localStorage.setItem(key, value);
        return true;
    } catch (error) {
        console.error(`Error saving to localStorage: ${error}`);
        return false;
    }
}
// ====== Update & Information Check ======
async function checkForUpdates() {
    const lastShownUpdate = localStorage.getItem('mdl_update');
    if (lastShownUpdate === TODAY) return;
    try {
        const [latestVersion, changelogRaw] = await Promise.all([
            fetchText('https://raw.githubusercontent.com/rizkikotet-dev/RTA-WRT/refs/heads/info/${currentBranch}/${baseopenwrt}/version.txt'),
            fetchText('https://raw.githubusercontent.com/rizkikotet-dev/RTA-WRT/refs/heads/info/${currentBranch}/${baseopenwrt}/changelog.txt')
        ]);
        if (latestVersion && latestVersion.trim() !== currentVersion) {
            const changelogMatch = changelogRaw.match(/\*\*Changelog\*\* \((.*?)\)\n([\s\S]*?)(?=\*\*Changelog\*\*|$)/);
            const changelogFormatted = changelogMatch 
                ? `<strong>Changelog (${changelogMatch[1]})</strong><p>${changelogMatch[2].trim().replace(/-\s/g, '• ').replace(/\n/g, '<br>')}</p>`
                : 'Tidak ada catatan perubahan.';
            enqueueAlert({
                title: '🚀 Update Tersedia!',
                width: 400,
                html: `
                    <div class="update-info" style="text-align: center;">
                        <img alt="Current Version" width="155" height="30" src="https://img.shields.io/badge/${currentVersion}-x?style=for-the-badge&logo=openwrt&color=blue">
                        <img alt="Latest Version" width="155" height="30" src="https://img.shields.io/badge/${latestVersion}-x?style=for-the-badge&logo=openwrt&color=green">
                        <div class="changelog" style="margin-top: 15px; text-align: left;">
                            <h4 style="color: #007BFF; background-color: #FFFFFF;">📋 Changelog:</h4>
                            <div>${changelogFormatted}</div>
                        </div>
                    </div>
                `,
                showCancelButton: true,
                showDenyButton: true,
                confirmButtonText: '🔄 Update',
                denyButtonText: '⏳ Nanti',
                cancelButtonText: '❌ Batal',
                onConfirm: () => {
                    window.open('https://github.com/rizkikotet-dev/RTA-WRT/releases', '_blank'),
                    saveToLocal('mdl_update', TODAY)
                },
                onDenied: () => saveToLocal('mdl_update', TODAY)
            });
        }
    } catch (error) {
        console.error('Error checking for updates:', error);
    }
}
async function checkInformation() {
    const infoContent = await fetchText(INFO_URL);
    if (infoContent && infoContent !== cache.content) {
        enqueueAlert({
            title: '🚀 Informasi',
            width: 400,
            html: `<div class="changelog" style="margin-top: 15px; text-align: left; white-space: pre-line;">
                    <div>${infoContent}</div>
                </div>`,
            icon: 'info',
            confirmButtonText: 'Mengerti',
            cancelButtonText: '❌ Tutup',
            onConfirm: () => {
                saveToLocal('lastInformation', infoContent);
                cache.content = infoContent;
                cache.lastUpdate = new Date().toISOString();
            }
        });
    }
}
// ====== Event About ======
function showProfile() {
    enqueueAlert({
        width: 400,
        title: "About Me!",
        text: "Halo! Saya Rizki Kotet, seorang programmer pemula yang belajar C# dan PHP. Saya memiliki pemahaman dasar tentang front-end dan back-end. Saat ini, saya sedang mengerjakan proyek Custom OpenWrt dan ImmortalWrt. Saya selalu bersemangat untuk belajar hal baru di dunia teknologi!",
        imageUrl: "{{ resource }}/Profile.jpeg",
        imageWidth: 200,
        imageHeight: 200,
        imageAlt: "Profile",
        allowOutsideClick: false,
        footer: `
            <p style="text-align: center;">
                <a href="https://t.me/rtawrt"><img alt="Channel" src="{{ resource }}/Channel.svg" width="110" height="30"></a>
                <a href="https://t.me/backup_rtawrt"><img alt="Group" src="{{ resource }}/Group.svg" width="110" height="30"></a>
                <a href="https://t.me/RizkiKotet"><img alt="Personal" src="{{ resource }}/Personal.svg" width="110" height="30"></a>
            </p>
        `
    });
}
// ====== Show Daily Modal ======
function showDailyModal() {
    const lastShownSaweria = localStorage.getItem('mdl_Saweria');
    if (lastShownSaweria !== TODAY) {
        enqueueAlert({
            title: "🚀 Welcome To RTA-WRT",
            width: 400,
            imageUrl: "{{ resource }}/Saweria.png",
            imageWidth: 200,
            imageHeight: 200,
            imageAlt: "Saweria",
            html: `
                <p style="text-align: center;">
                    <a href="https://t.me/rtawrt" target="_blank"><img alt="Channel" src="{{ resource }}/Channel.svg" width="110" height="20"></a>
                    <a href="https://t.me/backup_rtawrt" target="_blank"><img alt="Group" src="{{ resource }}/Group.svg" width="110" height="20"></a>
                    <a href="https://t.me/RizkiKotet" target="_blank"><img alt="Personal" src="{{ resource }}/Personal.svg" width="110" height="20"></a>
                </p>
                <div style="margin-top: 10px; text-align: center;">
                    <input type="checkbox" id="noShowToday">
                    <style>
                    #noShowToday:checked {
                        background-color: #5e72e4 !important;
                    }
                    </style>
                    <label for="noShowToday">Jangan tampilkan lagi hari ini</label>
                </div>
            `,
            confirmButtonText: 'OK',
            allowOutsideClick: false,
            didOpen: () => {
                document.getElementById('noShowToday').addEventListener('change', event => {
                    if (event.target.checked) {
                        saveToLocal('mdl_Saweria', TODAY);
                    } else {
                        localStorage.removeItem('mdl_Saweria');
                    }
                });
            }
        });
    }
}
// ====== Periodic Checker Initialization ======
function initializeChecker() {
    checkInformation();
    checkTimer = setInterval(checkInformation, CHECK_INTERVAL);
}
// ====== Event Listeners ======
document.addEventListener('DOMContentLoaded', () => {
    showDailyModal();
    checkForUpdates();
    initializeChecker();
});
document.addEventListener('visibilitychange', () => {
    document.visibilityState === 'visible' ? initializeChecker() : clearInterval(checkTimer);
});
window.addEventListener('online', initializeChecker);
window.addEventListener('offline', () => clearInterval(checkTimer));
</script>
<div class="square-wrapper">
    <div class="square" onclick="showProfile()">
        <div class="burgerwrap">
            <span></span>
            <span></span>
            <span></span>
        </div>
    </div>
</div>