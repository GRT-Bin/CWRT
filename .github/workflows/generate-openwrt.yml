name: Build OpenWrt v2

on:
  workflow_dispatch:
    inputs:
      releases_branch:
        description: "Select the releases branch"
        required: true
        default: "openwrt:24.10.0"
        type: choice
        options:
          - openwrt:24.10.0
          - immortalwrt:24.10.0
      devices:
        description: "Select device target"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - s905x
          - s905x2
          - s905x3
          - s905x4
          - s912
          - h5-orangepi-zeroplus2
          - h5-orangepi-zeroplus
          - h5-orangepi-prime
          - h5-orangepi-pc2
          - h6-orangepi-lite2
          - h6-orangepi-1plus
          - h6-orangepi-3
          - h6-orangepi-3lts
          - h616-orangepi-zero2
          - h618-orangepi-zero2w
          - h618-orangepi-zero3
          - rk3566-orangepi-3b
          - rk3588s-orangepi-5
          - bcm2710-rpi-3b
          - bcm2711-rpi-4b
          - x86-64
      notify:
        description: "Notify to Telegram"
        required: true
        default: false
        type: boolean

env:
  TZ: Asia/Jakarta
  IMAGEBUILDER_SH: imagebuilder.sh
  DEBIAN_FRONTEND: noninteractive
  APT_PACKAGES: >-
    build-essential
    libncurses5-dev
    zlib1g-dev
    gawk
    git
    gettext
    libssl-dev
    rsync
    wget
    unzip
    tar
    gzip
    qemu-utils
    mkisofs
    jq
    python3
    python3-pip
  CURRENT_BRANCH: ${{ github.ref_name }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      devices: ${{ steps.matrix.outputs.devices }}
      message_id: ${{ steps.telegram.outputs.message_id }}
      release_name: ${{ steps.setup.outputs.release_name }}
      release_tag: ${{ steps.setup.outputs.release_tag }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      startbuildtime: ${{ steps.setup.outputs.startbuildtime }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Add changelog info to new release description
        id: changelog
        shell: bash
        run: |
          r=$(awk '/^\*\*Changelog\*\*/ {if(found) exit; found=1} found' ${PWD}/CHANGELOG.md)
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"  
          echo "changelog=$r" >> $GITHUB_OUTPUT 

      - name: Setup Environment Variables
        id: setup
        run: |
          sudo timedatectl set-timezone "$TZ"

          STARTBUILDTIME=$(date +%s)
          DATETIME=$(date +'%d%m%Y')

          BRANCH_TAG=$(echo "${{ inputs.releases_branch }}" | tr ':' '_')

          release_name() {
              local source_name="${1%:*}"  # Ambil bagian sebelum ":"
              local branch_version="${1#*:}"  # Ambil bagian setelah ":"
              local release_for="$2"

              case "$source_name" in
                  openwrt) source_name="OpenWrt" ;;
                  immortalwrt) source_name="ImmortalWrt" ;;
                  *) echo "Error: Source tidak dikenali" >&2; return 1 ;;
              esac

              case "$release_for" in
                  main) release_type="Stable" ;;
                  dev) release_type="Development" ;;
                  *) echo "Error: Jenis release tidak dikenali" >&2; return 1 ;;
              esac

              local tanggal=$(date +'%d-%m-%Y')

              echo "RTA-WRT - $release_type | $source_name:$branch_version | $tanggal"
          }

          RELEASE_NAME=$(release_name "${{ inputs.releases_branch }}" "${{ github.ref_name }}")

          case "${{ github.ref_name }}" in
              main) RELEASE_TAG="${BRANCH_TAG}--main-${DATETIME}" ;;
              dev) RELEASE_TAG="${BRANCH_TAG}--dev-${DATETIME}" ;;
              *) echo "Error: Branch tidak dikenali" >&2; exit 1 ;;
          esac

          echo "startbuildtime=${STARTBUILDTIME}" >> $GITHUB_OUTPUT
          echo "datetime=${DATETIME}" >> $GITHUB_ENV
          echo "release_name=${RELEASE_NAME}" >> $GITHUB_OUTPUT
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT

      - name: Configure Build Matrix
        id: matrix
        run: |
          DEVICES_JSON=$(cat << 'EOJ'
          {
            "devices": [
              "s905x",
              "s905x2",
              "s905x3",
              "s905x4",
              "s912",
              "h5-orangepi-zeroplus2",
              "h5-orangepi-zeroplus",
              "h5-orangepi-prime",
              "h5-orangepi-pc2",
              "h6-orangepi-lite2",
              "h6-orangepi-1plus",
              "h6-orangepi-3",
              "h6-orangepi-3lts",
              "h616-orangepi-zero2",
              "h618-orangepi-zero2w",
              "h618-orangepi-zero3",
              "rk3566-orangepi-3b",
              "rk3588s-orangepi-5",
              "bcm2710-rpi-3b",
              "bcm2711-rpi-4b",
              "x86-64"
            ]
          }
          EOJ
          )
          
          if [ "${{ inputs.devices }}" = "all" ]; then
            echo "devices=$(echo "$DEVICES_JSON" | jq -c '.devices')" >> $GITHUB_OUTPUT
          else
            echo "devices=$(jq -nc --arg d "${{ inputs.devices }}" '[$d]')" >> $GITHUB_OUTPUT
          fi

      - name: Send Initial Telegram Message
        id: telegram
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          THREAD_ID_BUILD=616
          
          devices='${{ steps.matrix.outputs.devices }}'

          create_build_status_message() {
          cat << EOF
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          üöÄ *RTA-WRT | Build Status*
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          üìå *Version*: ${{ inputs.releases_branch }}
          üåø *Branch*: ${{ github.ref_name }}
          üìÖ *Date*: $(date "+%d-%m-%Y %H:%M:%S")
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          üìã *Device List*
          EOF

          while read -r device; do
              echo "üîπ $device | ‚è≥ Building"
          done < <(echo "$devices" | jq -r '.[]')

          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          }

          BUILD_STATUS_MESSAGE=$(create_build_status_message)
          
          RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
            -d chat_id=$CHAT_ID \
            -d parse_mode=Markdown \
            -d message_thread_id=$THREAD_ID_BUILD \
            -d text="$BUILD_STATUS_MESSAGE")
          
          echo "message_id=$(echo $RESPONSE | jq -r '.result.message_id')" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJSON(needs.prepare.outputs.devices) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Install Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y ${{ env.APT_PACKAGES }}
          sudo timedatectl set-timezone "$TZ"

      - name: Extract Changelog
        id: changelog
        run: |
          changelog=$(awk '/^\*\*Changelog\*\*/ {if(found) exit; found=1} found' CHANGELOG.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Prepare Before Build
        run: |
          OPEWRT="${{ inputs.releases_branch }}"
          OP_SOURCE="${OPEWRT%:*}"
          sed -i -E "s|baseOpenwrt: 'null'|baseOpenwrt: '${OP_SOURCE}'|g" files/usr/share/ucode/luci/template/header.ut
          sed -i -E "s|currentBranch: 'null'|currentBranch: '${{ github.ref_name }}'|g" files/usr/share/ucode/luci/template/header.ut
          sed -i -E "s|currentVersion: 'null'|currentVersion: '${{ needs.prepare.outputs.release_tag }}'|g" files/usr/share/ucode/luci/template/header.ut

      - name: Build Image
        id: build
        run: |
          chmod +x ${{ env.IMAGEBUILDER_SH }}
          if sudo ./${{ env.IMAGEBUILDER_SH }} ${{ inputs.releases_branch }} "${{ matrix.device }}"; then
            echo "status=‚úÖ Success" >> $GITHUB_OUTPUT
            echo "‚úÖ Success" > status.txt
          else
            echo "status=‚ùå Failed" >> $GITHUB_OUTPUT
            echo "‚ùå Failed" > status.txt
            exit 1
          fi

      - name: Upload Build Status
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-status-${{ matrix.device }}
          path: status.txt
          retention-days: 5

      - name: Upload to Release
        if: success()
        id: uploadgh
        uses: softprops/action-gh-release@v2
        with:
          files: imagebuilder/out_firmware/*
          tag_name: ${{ needs.prepare.outputs.release_tag }}
          name: ${{ needs.prepare.outputs.release_name }}
          body: |
            # üöÄ RTA-WRT - Release Information
            
            ## üì• Download Statistics
            ![GitHub Downloads](https://img.shields.io/github/downloads/${{ github.repository }}/${{ needs.prepare.outputs.release_tag }}/total?style=for-the-badge&logo=Openwrt)
            
            ## üì¢ Support Channels
            [![Channel](https://img.shields.io/badge/Telegram-Channel-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/rtawrt) [![Group](https://img.shields.io/badge/Telegram-Group-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/backup_rtawrt) [![Personal](https://img.shields.io/badge/Telegram-Personal-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/RizkiKotet)

            ## NOTES
            `Amlogic s905x Support Mod SDCard`
            
            ## üìù Changelog
            ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ github.ref_name == 'dev' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Save Download Link
        id: save_link
        run: echo "linkdl=${{ fromJSON(steps.uploadgh.outputs.assets)[0].browser_download_url }}" >> $GITHUB_OUTPUT

  notify:
    needs: [prepare, build]
    if: always()
    runs-on: ubuntu-latest   
    steps:
      - name: Download Build Status Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Update Telegram Message
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          THREAD_ID_BUILD=616

          devices='${{ needs.prepare.outputs.devices }}'

          format_time() {
            local total_seconds=$1
            local hours=$((total_seconds / 3600))
            local minutes=$(( (total_seconds % 3600) / 60 ))
            local seconds=$((total_seconds % 60))
            printf "%02d:%02d:%02d" $hours $minutes $seconds
          }
          
          end_time=$(date +%s)
          elapsed_time=$((end_time - ${{ needs.prepare.outputs.startbuildtime }}))
          formatted_time=$(format_time $elapsed_time)
  
          create_build_status_message() {
          cat << EOF
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          üöÄ *RTA-WRT | Build Status*
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          üìå *Version*: ${{ inputs.releases_branch }}
          üåø *Branch*: ${{ github.ref_name }}
          üìÖ *Date*: $(date "+%d-%m-%Y %H:%M:%S")
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          üìã *Device List*
          EOF

          while read -r device; do
              status=$(cat "artifacts/build-status-$device/status.txt" 2>/dev/null || echo "‚ùì Unknown")
              echo "üîπ $device | $status"
          done < <(echo "$devices" | jq -r '.[]')

          cat << EOF
          üéâ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅüéâ
          ‚ú® *Build OpenWrt Selesai!* ‚ú®
          üïí Waktu Build: $formatted_time
          üéâ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅüéâ
          üë§ @RizkiKotet
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          EOF
          }

          BUILD_STATUS_MESSAGE=$(create_build_status_message)
          
          curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/editMessageText" \
            -d chat_id=$CHAT_ID \
            -d message_id=${{ needs.prepare.outputs.message_id }} \
            -d parse_mode=Markdown \
            -d message_thread_id=$THREAD_ID_BUILD \
            -d text="$BUILD_STATUS_MESSAGE"
    
      - name: Notify Telegram
        if: ${{ !cancelled() && inputs.notify == 'true' }}
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          THREAD_ID_UPDATE=734
          
          create_stable_message() {
          cat << EOF
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          üéØ *RTA-WRT Firmware Update*
          ‚úÖ _Stable Release_

          üîπ *Versi:* ${{ inputs.releases_branch }}
          üîπ *Tanggal:* $(date "+%d-%m-%Y %H:%M:%S")

          üìå *Catatan:*
          üì¢ Versi Stabil Telah Diterbitkan!
          üîπ Disarankan untuk semua pengguna agar mendapatkan pengalaman terbaik!
          üîπ Ini Hasil Dari Marge Branch Development
          üîπ Dengan Fitur Baru Dan Perbaikan Bug
          üîπ Pastikan Anda Menggunakan Versi Terbaru Untuk Mendapatkan Fitur Terbaru

          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          üìã ${{ needs.prepare.outputs.changelog }}
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          EOF
          }

          STABLE_MESSAGE=$(create_stable_message)
       
          create_dev_message() {
          cat << EOF
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          üöÄ *RTA-WRT Firmware Update*
          üåü _Development Release_

          üîπ *Versi:* ${{ inputs.releases_branch }}
          üîπ *Tanggal:* $(date "+%d-%m-%Y %H:%M:%S")

          üìå *Catatan:*
          üì¢ Ini Versi Pengembangan!
          üîπ Silahkan Bagi Yang Mempunyai Devices Nganggur
             Atau Sekedar Ingin Mencoba.
             Jika Terdapat Error Atau Bug. Mohon Lapor
             Karena Laporan Sangat Bermanfaat!
             Untuk Membantu Kami Membuat Firmware
             Yang Lebih Baik!

          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          üìã ${{ needs.prepare.outputs.changelog }}
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          EOF
          }

          DEV_MESSAGE=$(create_dev_message)
        
          BUTTONS_STABLE='{
              "inline_keyboard": [
                  [
                      {"text": "üì• Unduh Firmware", "url": "https://github.com/rizkikotet-dev/RTA-WRT/releases/tag/${{ needs.prepare.outputs.release_tag }}"},
                      {"text": "üìã Status Build", "url": "https://t.me/backup_rtawrt/616/${{ needs.prepare.outputs.message_id }}"}
                  ]
              ]
          }'
        
          BUTTONS_DEV='{
              "inline_keyboard": [
                  [
                      {"text": "üì• Unduh Firmware", "url": "https://github.com/rizkikotet-dev/RTA-WRT/releases/tag/${{ needs.prepare.outputs.release_tag }}"},
                      {"text": "üìã Status Build", "url": "https://t.me/backup_rtawrt/616/${{ needs.prepare.outputs.message_id }}"}
                  ]
              ]
          }'
          
          OPEWRT="${{ inputs.releases_branch }}"
          OP_SOURCE="${OPEWRT%:*}"
          if [ "$OP_SOURCE" == "immortalwrt" ]; then
            IMGURL="https://avatars.githubusercontent.com/u/53193414?s=200&v=4"
          else
            IMGURL="https://avatars.githubusercontent.com/u/2528830?s=200&v=4"
          fi

          if [ "${CURRENT_BRANCH}" == "main" ]; then
            MSGID=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendPhoto" \
              -d "chat_id=$CHAT_ID" \
              -d "caption=$STABLE_MESSAGE" \
              -d "parse_mode=Markdown" \
              -d "message_thread_id=$THREAD_ID_UPDATE" \
              -d "reply_markup=$BUTTONS_STABLE" | jq '.result.message_id')

            curl -s -X POST "https://api.telegram.org/bot$TOKEN/pinChatMessage" \
              -d "chat_id=$CHAT_ID" \
              -d "photo=$IMGURL" \
              -d "message_id=$MSGID" \
              -d "message_thread_id=$THREAD_ID_UPDATE" \
              -d "disable_notification=true"
          else
            curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendPhoto" \
              -d "chat_id=$CHAT_ID" \
              -d "photo=$IMGURL" \
              -d "caption=$DEV_MESSAGE" \
              -d "parse_mode=Markdown" \
              -d "message_thread_id=$THREAD_ID_UPDATE" \
              -d "reply_markup=$BUTTONS_DEV"
          fi

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: info

      - name: Update Branch Info
        id: update
        env:
          CURRENT_BRANCH: ${{ env.CURRENT_BRANCH }}
        run: |
          set -euo pipefail
          OPEWRT="${{ inputs.releases_branch }}"
          OP_SOURCE="${OPEWRT%:*}"
          mkdir -p "${CURRENT_BRANCH}/${OP_SOURCE}"
      
          if [ -n "${{ needs.prepare.outputs.changelog }}" ]; then
            changelog_content=$(echo "${{ needs.prepare.outputs.changelog }}" | \
              sed -e 's/%0A/\n/g' \
                  -e 's/%0D/\r/g' \
                  -e 's/%25/%/g')
            echo "${changelog_content}" > "${CURRENT_BRANCH}/${OP_SOURCE}/changelog.txt"
            cat "${CURRENT_BRANCH}/${OP_SOURCE}/changelog.txt"
          else
            echo "No changelog content found"
            exit 1
          fi
      
          VERSION_TAG="${{ needs.prepare.outputs.release_tag }}"
          echo "${VERSION_TAG}" > "${CURRENT_BRANCH}/${OP_SOURCE}/version.txt"
      
          # Konfigurasi Git
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
      
          git add .
      
          if ! git diff --cached --quiet; then
            git commit -m "Auto Release: $(date "+%d-%m-%Y %H:%M:%S")"
            git push || echo "Failed to push changes"
          else
            echo "No changes detected, skipping commit"
          fi
        
  cleanup:
    needs: [build, notify]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Delete Old Workflow Runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 30
          keep_minimum_runs: 10